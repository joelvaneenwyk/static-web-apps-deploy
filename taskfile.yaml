# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json
# https://taskfile.dev
# brew install go-task

version: '3'

dotenv:
  - .env
  - .env.project

vars:
  DOCKER_IMAGE_NAME: 'static-web-apps-deploy'
  DOCKER_IMAGE_TAG: '{{ .DOCKER_IMAGE_NAME }}:stable'
  BUILD_DIR: '{{ .TASKFILE_DIR }}/.build'
  BIN_DIR: '{{ .BUILD_DIR }}/bin'

  BREW: '/home/linuxbrew/.linuxbrew/bin/brew'
  BREW_INSTALL_SCRIPT: '{{ .BIN_DIR }}/install-brew.sh'
  BREW_INSTALL_URI: 'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh'

tasks:
  default:
    cmds:
      - task: build

  get-install-brew-script:
    deps: [init-build-directory]
    status:
      - test -f "{{ .BREW_INSTALL_SCRIPT }}"
    sources:
      - '{{ .BREW_INSTALL_URI }}'
    generates:
      - '{{ .BREW_INSTALL_SCRIPT }}'
    cmds:
      - cmd: |
          curl -fsSL "{{ .BREW_INSTALL_URI }}" >"{{ fromSlash .BREW_INSTALL_SCRIPT }}"
        platforms: [darwin, linux]
      - cmd: scoop install touch && touch "{{ fromSlash .BREW_INSTALL_SCRIPT }}"
        platforms: [windows]

  install-brew:
    deps: [get-install-brew-script]
    status:
      - test -f "{{ .BREW_INSTALL_SCRIPT }}"
      - test -f "{{ .BREW }}"
      - brew --version
    cmds:
      - cmd: |
          "{{ .BREW_INSTALL_SCRIPT }}"
          if [ -n "${GITHUB_PATH:-}" ]; then
            echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
            echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
          fi
        platforms: [darwin, linux]
      - cmd: scoop install brew
        platforms: [windows]

  install-sass:
    deps: [install-brew]
    status:
      - sass --embedded --version
    env:
      PATH: '${PATH}:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin'
    cmds:
      - cmd: '"{{ .BREW }}" install sass/sass/sass'
        platforms: [darwin, linux]
      - cmd: 'scoop install sass'
        platforms: [windows]

  init-build-directory:
    status:
      - test -d "{{ .BIN_DIR }}"
    cmds:
      - cmd: cmd /d /c mkdir "{{ .BUILD_DIR }}"
        platforms: [windows]
      - cmd: cmd /d /c mkdir "{{ .BIN_DIR }}"
        platforms: [windows]
      - cmd: mkdir -p "{{ .BIN_DIR }}"
        platforms: [linux, darwin]

  rebuild:
    cmds:
      - cmd: rm "{{ .TASKFILE_DIR }}/package-lock.json"
        ignore_error: true
      - task: build

  install-node-packages:
    status:
      - 'test -f "{{ .TASKFILE_DIR }}/package-lock.json"'
    sources:
      - '{{ .TASKFILE_DIR }}/package.json'
    generates:
      - '{{ .TASKFILE_DIR }}/package-lock.json'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/autoprefixer'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/prettier'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/postcss'
    cmds:
      - cmd: npm install

  init:
    deps: [build]

  build:
    deps: [install-sass, install-node-packages, init-build-directory]
    sources:
      - '{{ .TASKFILE_DIR }}/package.json'
      - '{{ .TASKFILE_DIR }}/package-lock.json'
      - '{{ .TASKFILE_DIR }}/test/hugo.toml'
      - '{{ .TASKFILE_DIR }}/test/themes/nightfall/theme.toml'
    generates:
      - '{{ .TASKFILE_DIR }}/test/public/index.html'
      - '{{ .TASKFILE_DIR }}/test/public/404.html'
    cmds:
      - cmd: npm run build

  format:
    deps: [build]
    cmds:
      - cmd: npm run format

  install-act:
    status:
      - act --version
    cmds:
      - cmd: 'brew install nektos/tap/act'
        platforms: [linux, darwin]
      - cmd: 'scoop install main/act'
        platforms: [windows]

  install-gh:
    status:
      - gh --version
    cmds:
      - cmd: 'brew install gh'
        platforms: [linux, darwin]
      - cmd: 'winget install --id GitHub.cli -scope machine'
        platforms: [windows]

  install-gh-act:
    deps: [install-gh, install-act]
    status:
      - gh act --version
    cmds:
      - cmd: gh extension install nektos/gh-act

  act:
    deps: [install-gh-act]
    env:
      GIT_TERMINAL_PROMPT: 0
    vars:
      # build-and-push-image, test-local-github-action
      ACT_GH_JOB_NAME: test-local-github-action
      ACT_GH_TOKEN: '{{ default "INVALID_TOKEN" .GITHUB_TOKEN }}'
      ACT_GH_USER: '{{ default "INVALID_USER" .GITHUB_USER }}'
    cmds:
      - cmd: |
          echo "{{ .ACT_GH_TOKEN }}" | \
            docker login ghcr.io -u "{{ .ACT_GH_USER }}" --password-stdin
      - cmd: >-
          gh act
          -j="{{ .ACT_GH_JOB_NAME }}"
          -s GITHUB_TOKEN="{{ .ACT_GH_TOKEN }}"
          --replace-ghe-action-token-with-github-com "{{ .ACT_GH_TOKEN }}"

  version:
    cmds:
      - task: docker-run
        vars: { ARGS: 'version' }

  dotenv-login:
    status:
      - 'test -f "{{ .TASKFILE_DIR }}/.env.me"'
    sources:
      - .env.vault
    generates:
      - .env.me
    cmds:
      - cmd: npx --yes dotenv-vault@latest login --yes

  dotenv-push:
    deps: [dotenv-login]
    preconditions:
      - 'test -f "{{ .TASKFILE_DIR }}/.env"'
      - 'test -f "{{ .TASKFILE_DIR }}/.env.me"'
      - 'test -f "{{ .TASKFILE_DIR }}/.env.vault"'
    cmds:
      - cmd: npx --yes dotenv-vault@latest push --yes

  bash:
    aliases: [sh]
    interactive: true
    cmds:
      - task: docker-run
        vars: { CLI_ARGS: 'bash --login {{ .CLI_ARGS }}', INTERACTIVE: true }

  pre-commit:
    deps: [format]
    cmds:
      - cmd: git add .

  docker-buildx:
    deps: [init]
    aliases:
      - db
      - cb
    vars:
      DOCKERFILE_PATH: '{{ .TASKFILE_DIR }}/Dockerfile'
      DOCKER_BUILD_LOG_PATH: '{{ .BUILD_DIR }}/docker-build.log'
    env:
      DOCKER_BUILDKIT: 1
    status:
      - test -n "$(docker images -q "{{ .DOCKER_IMAGE_TAG }}")"
    sources:
      - '{{ .DOCKERFILE_PATH }}'
      - '{{ .TASKFILE_DIR }}/src/entrypoint.sh'
    generates:
      - '{{ .DOCKER_BUILD_LOG_PATH }}'
    cmds:
      - cmd: >-
          docker buildx build
          --file "{{ fromSlash .DOCKERFILE_PATH }}"
          -t "{{ .DOCKER_IMAGE_TAG}}"
          --progress plain
          "{{ fromSlash .TASKFILE_DIR }}"
          >"{{ fromSlash .DOCKER_BUILD_LOG_PATH }}"

  docker-run:
    deps: [docker-buildx]
    aliases: [r, run]
    vars:
      SKIP_DEPLOY_ON_MISSING_SECRETS: true
      SKIP_APP_BUILD: true
      DOCKER_APP_LOCATION: '/root/build'
      DOCKER_IMAGE: '{{ .DOCKER_IMAGE_TAG }}'
      INTERACTIVE: '{{ if .INTERACTIVE }}-it{{ end }}'
      ARGS_DEFAULT: >-
        upload
        --skipAppBuild
        --app "{{ .DOCKER_APP_LOCATION }}"
        --apiToken "{{ .AZURE_STATIC_WEB_APPS_API_TOKEN }}"
      ARGS: '{{ coalesce .CLI_ARGS .ARGS_DEFAULT "" }}'
    cmds:
      - cmd: >-
          docker run
          --rm {{ .INTERACTIVE }}
          --volume "{{ .TASKFILE_DIR }}":"{{ .DOCKER_APP_LOCATION }}"
          --volume "{{ .TASKFILE_DIR }}/src/":"/admin/"
          --restart=no
          --log-driver local
          --log-opt max-size=10m
          --log-opt max-file=3
          --workdir "{{ .DOCKER_APP_LOCATION }}"
          --name "{{ .DOCKER_IMAGE_NAME }}"
          "{{ .DOCKER_IMAGE }}"
          {{ .ARGS }}

  run-swa:
    desc: |
      Run 'mcr.microsoft.com/appsvc/staticappsclient:stable' image directly so that we can
      quickly validate if there are any major differences between our image and the
      officially supported version.
    vars:
      # As noted in 'https://github.com/Azure/static-web-apps/issues/679#issuecomment-1357799789' it is
      # expected that 'SKIP_DEPLOY_ON_MISSING_SECRETS' is an environment variable. This conflicts with
      # documentation which is logged against 'https://github.com/Azure/static-web-apps/issues/679'.
      SKIP_DEPLOY_ON_MISSING_SECRETS: true
      SKIP_APP_BUILD: true
      APP_LOCATION: '{{ .TASKFILE_DIR }}/test/public'
      DOCKER_APP_LOCATION: '/root/build'
      DOCKER_IMAGE: 'mcr.microsoft.com/appsvc/staticappsclient:stable'
    env:
      SKIP_DEPLOY_ON_MISSING_SECRETS: '{{ .SKIP_DEPLOY_ON_MISSING_SECRETS }}'
    cmds:
      - cmd: >-
          docker run
          --rm
          --entrypoint "/bin/staticsites/StaticSitesClient"
          --volume "{{ fromSlash .APP_LOCATION }}":"{{ .DOCKER_APP_LOCATION }}"
          {{ .DOCKER_IMAGE }}
          upload
          --skipAppBuild {{ .SKIP_APP_BUILD }}
          --app "{{ .DOCKER_APP_LOCATION }}"
          --apiToken "{{ .AZURE_STATIC_WEB_APPS_API_TOKEN }}"

  static-sites-client:
    vars:
      linux_url: 'https://swalocaldeploy.azureedge.net/downloads/1.0.020981/linux/StaticSitesClient'
      linux_sha: 'e55db21d0720a12098804559152303e66846bdd94c13a30b30be29a0fc9ae366'
      win_url: 'https://swalocaldeploy.azureedge.net/downloads/1.0.020981/windows/StaticSitesClient.exe'
      win_sha: '4e4eb72aef26641e236c24929c822500e956bda099ca78054112cadf20261107'
      osx_url: 'https://swalocaldeploy.azureedge.net/downloads/1.0.020981/macOS/StaticSitesClient'
      osx_sha: 'e0f2ae7ec297510a1b3b9332c0dc0dd962a51adb8ea13cd4f3746d79fc24a7e9'
    cmds:
      - cmd: 'mkdir -p "{{ .BIN_DIR }}"'
      - cmd: 'curl -L -o "{{ .BIN_DIR }}/StaticSitesClient" "{{ .linux_url }}"'
      - cmd: 'chmod +x "{{ .BIN_DIR }}/StaticSitesClient"'
      # - cmd: |
      #     calculated_hash=$(sha256sum "{{ .BIN_DIR }}/StaticSitesClient" | awk '{ print $1 }')
      #     echo "Calculated hash: $calculated_hash"
      #     if [ "$calculated_hash" = "{{ .linux_sha }}" ]; then
      #       echo "Hash match. The file is verified."
      #     else
      #       exit 88
      #     fi
