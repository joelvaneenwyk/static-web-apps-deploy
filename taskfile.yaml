# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json
# https://taskfile.dev
# brew install go-task

version: '3'

set: [pipefail]
shopt: [globstar]
dotenv:
  - .env

vars:
  DOCKER_IMAGE_NAME: 'static-web-apps-deploy'
  DOCKER_IMAGE_TAG: '{{ .DOCKER_IMAGE_NAME }}:stable'
  BUILD_DIR: '{{ .TASKFILE_DIR }}/.build'
  BIN_DIR: '{{ .BUILD_DIR }}/bin'

  BREW: '/home/linuxbrew/.linuxbrew/bin/brew'
  BREW_INSTALL_SCRIPT: '{{ .BIN_DIR }}/install-brew.sh'
  BREW_INSTALL_URI: 'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh'

  RUN_WINDOWS: 'cmd /d /c'
  RUN_UNIX: 'sh -c'
  RUN: '{{if eq OS "windows"}}{{.RUN_WINDOWS}}{{ else }}{{.RUN_UNIX}}{{ end }}'

  DOTENV_VAULT: npx --yes dotenv-vault@latest

  DOCKER_IMAGE_STATIC_WEB_APPS_CLIENT: "static-web-apps-client"

tasks:
  default:
    cmds:
      - task: build

  get-static-sites-client:
    vars:
      PLATFORM: '{{ default "linux" .PLATFORM }}'
      OUTPUT_DIR: '{{.TASKFILE_DIR}}/bin/docker'
      ARRAY: 'linux darwin windows'
      COPY_COMMANDS: |-
        cp -r /bin/staticsites/ /docker/bin/
        cp /entrypoint.sh /docker/
        cp /bin/staticsites/StaticSitesClient /docker/
    status:
      - test -d "{{ .OUTPUT_DIR }}"
      - test -f "{{ .OUTPUT_DIR }}/entrypoint.sh"
      - test -f "{{ .OUTPUT_DIR }}/StaticSitesClient"
      - test -f "{{ .OUTPUT_DIR }}/bin/staticsites/StaticSitesClient.dll"
    cmds:
      - cmd: cmd.exe /d /c rmdir /q /s "{{ .OUTPUT_DIR | fromSlash }}" || true
      - cmd: cmd.exe /d /c mkdir "{{ .OUTPUT_DIR | fromSlash }}" || true
      - cmd: cmd.exe /d /c mkdir "{{ joinPath .OUTPUT_DIR "bin" | fromSlash }}" || true
      - cmd: cmd.exe /d /c mkdir "{{ joinPath .OUTPUT_DIR "bin" "staticsites" | fromSlash }}" || true
      - cmd: >-
          docker run --rm --platform="{{.PLATFORM}}/amd64"
          -v "{{ fromSlash .OUTPUT_DIR }}":/docker
          -it
          mcr.microsoft.com/appsvc/staticappsclient:stable
          /bin/bash -c "{{ splitList "\n" .COPY_COMMANDS | uniq | join " && " }}"

  get-install-brew-script:
    deps: [init-build-directory]
    status:
      - test -f "{{ .BREW_INSTALL_SCRIPT }}"
    sources:
      - '{{ .BREW_INSTALL_URI }}'
    generates:
      - '{{ .BREW_INSTALL_SCRIPT }}'
    cmds:
      - cmd: |
          curl -fsSL "{{ .BREW_INSTALL_URI }}" >"{{ fromSlash .BREW_INSTALL_SCRIPT }}"
        platforms: [darwin, linux]
      - cmd: scoop install touch && touch "{{ fromSlash .BREW_INSTALL_SCRIPT }}"
        platforms: [windows]

  install-brew:
    deps: [get-install-brew-script]
    status:
      - test -f "{{ .BREW_INSTALL_SCRIPT }}"
      - test -f "{{ .BREW }}"
      - brew --version
    cmds:
      - cmd: |
          "{{ .BREW_INSTALL_SCRIPT }}"
          if [ -n "${GITHUB_PATH:-}" ]; then
            echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
            echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
          fi
        platforms: [darwin, linux]

  install-sass:
    deps: [install-brew]
    status:
      - sass --embedded --version
    env:
      PATH: '${PATH}:/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin'
    cmds:
      - cmd: '"{{ .BREW }}" install sass/sass/sass'
        platforms: [darwin, linux]
      - cmd: 'scoop install sass'
        platforms: [windows]

  init-build-directory:
    status:
      - test -d "{{ .BIN_DIR }}"
    cmds:
      - cmd: cmd /d /c mkdir "{{ .BUILD_DIR }}"
        platforms: [windows]
      - cmd: cmd /d /c mkdir "{{ .BIN_DIR }}"
        platforms: [windows]
      - cmd: mkdir -p "{{ .BIN_DIR }}"
        platforms: [linux, darwin]

  install-node-packages:
    status:
      - 'test -f "{{ .TASKFILE_DIR }}/package-lock.json"'
    sources:
      - '{{ .TASKFILE_DIR }}/package.json'
    generates:
      - '{{ .TASKFILE_DIR }}/package-lock.json'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/autoprefixer'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/prettier'
      - '{{ .TASKFILE_DIR }}/node_modules/.bin/postcss'
    cmds:
      - cmd: npm install

  rebuild:
    desc: Rebuild the Static Web Apps project.
    cmds:
      - task: delete
        vars: { TARGET: '{{ .TASKFILE_DIR }}/package-lock.json' }
      - task: build

  build:
    desc: Build the Static Web Apps project.
    deps: [install-sass, install-node-packages, init-build-directory]
    sources:
      - '{{ .TASKFILE_DIR }}/package.json'
      - '{{ .TASKFILE_DIR }}/package-lock.json'
      - '{{ .TASKFILE_DIR }}/test/hugo.toml'
      - '{{ .TASKFILE_DIR }}/test/themes/nightfall/theme.toml'
    generates:
      - '{{ .TASKFILE_DIR }}/test/public/index.html'
      - '{{ .TASKFILE_DIR }}/test/public/404.html'
    cmds:
      - cmd: npm run build

  format:
    desc: Automatically format all files with 'Prettier' command.
    deps: [build]
    cmds:
      - cmd: npm run format

  install-act:
    status:
      - act --version
    cmds:
      - cmd: 'brew install nektos/tap/act'
        platforms: [linux, darwin]
      - cmd: 'scoop install main/act'
        platforms: [windows]

  install-gh:
    status:
      - gh --version
    cmds:
      - cmd: 'brew install gh'
        platforms: [linux, darwin]
      - cmd: 'winget install --id GitHub.cli -scope machine'
        platforms: [windows]

  install-gh-act:
    deps: [install-gh, install-act]
    status:
      - gh act --version
    cmds:
      - cmd: gh extension install nektos/gh-act

  act:
    deps: [install-gh-act, dotenv-pull]
    desc: Run GitHub Actions locally.
    aliases: [a, gact, ghact]
    dotenv: ['.env']
    env:
      GIT_TERMINAL_PROMPT: 0
    vars:
      # build-and-push-image, test-local-github-action
      ACT_GH_JOB_NAME: test-local-github-action
      ACT_GH_TOKEN: '{{ .GITHUB_TOKEN | default "INVALID_TOKEN" }}'
      ACT_GH_USER: '{{ .GITHUB_USER | default "INVALID_USER" }}'
    cmds:
      - cmd: |
          echo "{{ .ACT_GH_TOKEN }}" | \
            docker login ghcr.io -u "{{ .ACT_GH_USER }}" --password-stdin
        silent: true
      - cmd: >-
          gh act
          -j="{{ .ACT_GH_JOB_NAME }}"
          -s GITHUB_TOKEN="{{ .ACT_GH_TOKEN }}"
          --replace-ghe-action-token-with-github-com "{{ .ACT_GH_TOKEN }}"
        silent: true

  dotenv-login:
    internal: true
    status:
      - 'test -f "{{ .TASKFILE_DIR }}/.env.me"'
    sources:
      - .env.vault
    generates:
      - .env.me
    cmds:
      - cmd: '{{ .DOTENV_VAULT }} login --yes'

  dotenv-push:
    internal: true
    deps: [dotenv-login]
    preconditions:
      - 'test -f "{{ .TASKFILE_DIR }}/.env"'
      - 'test -f "{{ .TASKFILE_DIR }}/.env.me"'
      - 'test -f "{{ .TASKFILE_DIR }}/.env.vault"'
    cmds:
      - cmd: '{{ .DOTENV_VAULT }} push --yes'

  dotenv-pull:
    deps: [dotenv-login]
    status:
      - 'test -f "{{ .TASKFILE_DIR }}/.env"'
    sources:
      - .env.vault
    generates:
      - .env
    cmds:
      - cmd: '{{ .DOTENV_VAULT }} pull --yes'

  pre-commit:
    desc: Run formatter and add files to 'git' automatically.
    deps: [format]
    cmds:
      - cmd: git add .

  bash:
    desc: Start an interactive shell session in Static Web Apps Docker container.
    aliases: [sh]
    interactive: true
    vars:
      CLI_ARGS: '{{ if .CLI_ARGS }}bash --login -c "{{ .CLI_ARGS }}"{{ else }}bash --login{{ end }}'
    cmds:
      - task: docker
        vars: { CLI_ARGS: '{{ .CLI_ARGS }}', INTERACTIVE: true }

  version:
    cmds:
      - task: docker
        vars: { ARGS: 'version' }

  delete:
    internal: true
    requires: { vars: [TARGET] }
    status:
      - 'test ! -d "{{.TARGET}}"'
      - 'test ! -f "{{.TARGET}}"'
    cmds:
      - task: delete-dir
        vars: { TARGET_DIR: '{{ .TARGET }}' }
      - task: delete-file
        vars: { TARGET_FILE: '{{ .TARGET }}' }

  delete-dir:
    internal: true
    requires: { vars: [TARGET_DIR] }
    status:
      - 'test ! -d "{{.TARGET_DIR}}"'
    cmds:
      - cmd: '{{.RUN}} if exist "{{ fromSlash .TARGET_DIR }}" rmdir /s /q "{{ fromSlash .TARGET_DIR }}"'
        platforms: [windows]
      - cmd: '{{.RUN}} rm -rf "{{.TARGET_DIR}}"'
        platforms: [linux, darwin]

  delete-file:
    internal: true
    requires: { vars: [TARGET_FILE] }
    status:
      - 'test ! -f "{{.TARGET_FILE}}"'
    cmds:
      - cmd: '{{.RUN}} if exist "{{fromSlash .TARGET_FILE}}" del "{{fromSlash .TARGET_FILE}}"'
        platforms: [windows]
      - cmd: '{{.RUN}} rm -f "{{.TARGET_FILE}}"'
        platforms: [linux, darwin]

  docker-build:
    internal: true
    deps: [build]
    aliases:
      - db
      - cb
    vars:
      DOCKERFILE_PATH: '{{ .TASKFILE_DIR }}/Dockerfile'
      DOCKER_BUILD_LOG_PATH: '{{ .BUILD_DIR }}/docker-build.log'
    env:
      DOCKER_BUILDKIT: 1
    status:
      - test -n "$(docker images -q "{{ .DOCKER_IMAGE_TAG }}")"
    sources:
      - '{{ .DOCKERFILE_PATH }}'
      - '{{ .TASKFILE_DIR }}/src/entrypoint.sh'
    generates:
      - '{{ .DOCKER_BUILD_LOG_PATH }}'
    cmds:
      - cmd: >-
          docker buildx build
          --file "{{ fromSlash .DOCKERFILE_PATH }}"
          -t "{{ .DOCKER_IMAGE_TAG}}"
          --progress plain
          "{{ fromSlash .TASKFILE_DIR }}"
          >"{{ fromSlash .DOCKER_BUILD_LOG_PATH }}"

  docker:
    aliases: [d, r, run]
    desc: Run the Static Web Apps Docker container.
    deps: [docker-build, dotenv-pull]
    vars:
      INPUT_INTERACTIVE: '{{ coalesce .INTERACTIVE .CLI_ARGS }}'
      INPUT_DATA_API_LOCATION: '{{ default "" .DATA_API_LOCATION }}'
      INPUT_APP_ARTIFACT_LOCATION: '{{ default "./test/public/" .APP_ARTIFACT_LOCATION }}'

      DOCKER_IMAGE: '{{ .DOCKER_IMAGE_TAG }}'
      DOCKER_IMAGE_NAME: '{{ .DOCKER_IMAGE_NAME }}'
      DOCKER_CONTAINER_NAME: '{{ coalesce .DOCKER_CONTAINER_NAME .DOCKER_IMAGE_NAME }}'
      DOCKER_ARG_INTERACTIVE: '{{ if .INPUT_INTERACTIVE }}-it{{ end }}'
      DOCKER_APP_LOCATION: '{{ default "/root/build" .APP_LOCATION }}'

      SKIP_DEPLOY_ON_MISSING_SECRETS: '{{ default true .SKIP_DEPLOY_ON_MISSING_SECRETS }}'
      SKIP_APP_BUILD: '{{ default true .SKIP_APP_BUILD }}'

      SWA_ARG_ACTION: '{{ default "run" .ACTION }}'
      SWA_ARG_APP_LOCATION: '{{ if ne .DOCKER_APP_LOCATION "" }}--app "{{ .DOCKER_APP_LOCATION }}"{{ end }}'
      SWA_ARG_DATA_API_LOCATION: '{{ if ne .INPUT_DATA_API_LOCATION "" }}--dataApi "{{ .INPUT_DATA_API_LOCATION }}"{{ end }}'
      SWA_ARG_APP_ARTIFACT_LOCATION: '{{ if ne .INPUT_APP_ARTIFACT_LOCATION "" }}--appArtifactLocation "{{ .INPUT_APP_ARTIFACT_LOCATION }}"{{ end }}'
      SWA_ARG_WORK_DIR: '{{ if ne .DOCKER_APP_LOCATION "" }}--workdir "{{ .DOCKER_APP_LOCATION }}"{{ end }}'
      SWA_ARG_DEPLOYMENT_ACTION: '{{ if eq .ARG_ACTION "upload" }}--deploymentaction "{{ .ARG_ACTION }}"{{ end }}'
      SWA_ARG_AZURE_API_TOKEN: '{{ if .AZURE_STATIC_WEB_APPS_API_TOKEN }}--apiToken "{{ .AZURE_STATIC_WEB_APPS_API_TOKEN }}"{{ end }}'

      SWA_DEFAULT_ARGS: >-
        {{ .SWA_ARG_ACTION }}
        {{ .SWA_ARG_DEPLOYMENT_ACTION }}
        {{ .SWA_ARG_APP_LOCATION }}
        {{ .SWA_ARG_APP_ARTIFACT_LOCATION }}
        {{ .SWA_ARG_DATA_API_LOCATION }}
        {{ .SWA_ARG_AZURE_API_TOKEN }}
      SWA_ARGUMENTS: '{{ coalesce .CLI_ARGS .SWA_DEFAULT_ARGS "" }}'
    cmds:
      - cmd: docker stop -f "{{ .DOCKER_CONTAINER_NAME }}"
        ignore_error: true
      - cmd: docker rm -f "{{ .DOCKER_CONTAINER_NAME }}"
        ignore_error: true
      - cmd: >-
          docker run
          --rm
          {{ .DOCKER_ARG_INTERACTIVE }}
          --restart no
          --volume "{{ .TASKFILE_DIR }}":"{{ .DOCKER_APP_LOCATION }}"
          --volume "{{ .TASKFILE_DIR }}/src/":"/admin/"
          --log-opt "max-size=10m"
          --log-opt "max-file=3"
          --log-driver local
          --name "{{ .DOCKER_CONTAINER_NAME }}"
          "{{ .DOCKER_IMAGE_TAG }}"
          {{ .SWA_ARGUMENTS }}
      - cmd: docker wait "{{ .DOCKER_CONTAINER_NAME }}"
        ignore_error: true

  static-apps-client:
    aliases: [sac, swa, s]
    desc: >-
      Run 'mcr.microsoft.com/appsvc/staticappsclient:stable' image directly so
      that we can quickly validate if there are any major differences between
      our image and the officially supported version.
    dotenv: [.env]
    vars:
      # As noted in 'https://github.com/Azure/static-web-apps/issues/679#issuecomment-1357799789' it is
      # expected that 'SKIP_DEPLOY_ON_MISSING_SECRETS' is an environment variable. This conflicts with
      # documentation which is logged against 'https://github.com/Azure/static-web-apps/issues/679'.
      SKIP_DEPLOY_ON_MISSING_SECRETS: true
      SKIP_APP_BUILD: true
      APP_LOCATION: '{{ .TASKFILE_DIR }}/test/public'
      DOCKER_APP_LOCATION: '/root/build'
      DOCKER_IMAGE: 'mcr.microsoft.com/appsvc/staticappsclient:stable'
    env:
      SKIP_DEPLOY_ON_MISSING_SECRETS: '{{ .SKIP_DEPLOY_ON_MISSING_SECRETS }}'
    cmds:
      - cmd: >-
          docker run
          --rm
          --entrypoint "/bin/staticsites/StaticSitesClient"
          --volume "{{ fromSlash .APP_LOCATION }}":"{{ .DOCKER_APP_LOCATION }}"
          {{ .DOCKER_IMAGE }}
          upload
          --app "{{ .DOCKER_APP_LOCATION }}"
          --apiToken "{{ .AZURE_STATIC_WEB_APPS_API_TOKEN }}"
