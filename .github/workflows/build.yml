name: Build GitHub Action

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image_name: ${{ steps.get-image-name.outputs.image_name }}

    name: Docker Build
    steps:
      - name: Login Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - uses: actions/checkout@v4
      - name: Build and Push Image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: ${{ github.workspace }}/Dockerfile
          push: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get Image Name
        id: get-image-name
        shell: bash
        env:
          IMAGE_NAME: ${{ fromJSON(steps.push.outputs.metadata)['image.name'] }}
        run: echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

  # Inspired by the following example:
  #
  #   - https://github.com/docker/build-push-action/issues/614#issuecomment-1130396065
  validate-docker-image:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    name: Validate Docker Image
    steps:
      - name: Login Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      - name: "Test: `StaticSitesClient version`"
        run: >-
          docker run --rm "${{needs.build-and-push-image.outputs.image_name}}" version

  test-local-github-action:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    name: Test Custom Action
    steps:
      - uses: actions/checkout@v4

      - uses: ./
        name: "Check Version"
        with:
          action: version
          repo_token: ${{ github.token }}
          skip_deploy_on_missing_secrets: true

      - uses: ./
        name: "Check Build"
        with:
          action: build
          app_location: .
          output_location: ./test/public
          app_build_command: npm run build
          repo_token: ${{ github.token }}
          skip_deploy_on_missing_secrets: true

  build-local-test-site:
    needs: build-and-push-image
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: '${{ matrix.os }}'
    name: 'Build Local Action'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Install Homebrew
        if: matrix.os != 'windows-latest'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH
          echo "/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        env:
          NONINTERACTIVE: 1

      - name: Setup Hugo
        if: matrix.os != 'windows-latest'
        run: |
          brew install hugo
          hugo version

      - name: Setup Embedded Dart Sass
        if: matrix.os != 'windows-latest'
        run: |
          brew install sass/sass/sass
          sass --embedded --version

      - run: npm install
      - run: npm run build
