# yaml-language-server: $schema=https://json.schemastore.org/github-action

name: 'Azure Static Web Apps Deploy'
description: 'Deploys an application to Azure Static Web Apps'
author: 'Microsoft'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  action:
    description: 'Action to perform'
    required: true
    default: 'deploy'
  app_location:
    description: 'Directory location of the application source code'
    required: true
    default: './'
  azure_static_web_apps_api_token:
    description: 'Deploy token for Azure Static Web App'
    required: true
  repo_token:
    description: >
      Token for interacting with the Github repository which is currently used primarily
      for commenting on Pull Requests.

      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.

      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
  skip_deploy_on_missing_secrets:
    description: 'Skip deployment if secrets are missing'
    default: 'true'
  api_build_command:
    description: 'Custom command for Oryx to run when building Azure Functions source code'
  api_location:
    description: 'Directory location of the Azure Functions source code'
  data_api_location:
    description: 'Directory location of the Data API configuration files'
  app_artifact_location:
    description: 'Identical in use to output_location'
  output_location:
    description: 'Directory location of the compiled application code after building'
  app_build_command:
    description: 'Custom command for Oryx to run when building application source code'
  routes_location:
    description: 'Directory location where the routes.json file can be found in the source code'
  skip_app_build:
    description: 'Skips the build step for the application source code if set to true.'
  config_file_location:
    description: 'Directory location where the staticwebapp.config.json file can be found in the source code'
  skip_api_build:
    description: 'Skips the build step for the Azure Functions source code if set to true.'
  production_branch:
    description: 'When specified, deployments from other branches will be considered preview environments.'
  deployment_environment:
    description: 'Name of the Azure Static Web Apps environment to deploy to.'
  is_static_export:
    description: 'Indicates you are using `next export` to generate a static site if set to true.'

outputs:
  static_web_app_url:
    description: 'Url of the application'
    value: ''

  image_name:
    description: 'Name of the Docker image used to run the action'
    value: ''

runs:
  using: 'composite'
  steps:
    - name: Set globals
      id: globals
      shell: bash
      run: |
        function write_env() {
          echo "TA_USERNAME=${{ github.actor }}"
          echo "TA_PASSWORD=${{ inputs.repo_token }}"
          echo "TA_TOKEN=${{ inputs.repo_token }}"

          TA_REPOSITORY="${{ github.action_repository || github.repository }}"
          echo "TA_REPOSITORY=$TA_REPOSITORY"
          echo "TA_GHCR_IMAGE=ghcr.io/$TA_REPOSITORY"

          TA_APP_LOCATION="${{ inputs.app_location }}"
          TA_WORKSPACE_DOCKER_PATH="/workspace/$TA_APP_LOCATION"
          echo "TA_WORKSPACE_LOCAL_PATH=${{ github.workspace }}/$TA_APP_LOCATION"
          echo "TA_WORKSPACE_DOCKER_PATH=$TA_WORKSPACE_DOCKER_PATH"

          echo "TA_CLI_INPUT_ACTION=${{ inputs.action || 'deploy' }}"
          echo "TA_CLI_APP_LOCATION=--app $TA_WORKSPACE_DOCKER_PATH"
          echo "TA_CLI_DATA_APP_ARTIFACT_LOCATION=--appArtifactLocation $TA_WORKSPACE_DOCKER_PATH/${{ inputs.app_artifact_location }}"
          echo "TA_CLI_DATA_API_LOCATION=--api $TA_WORKSPACE_DOCKER_PATH/${{ inputs.data_api_location }}"
          echo "TA_CLI_AZURE_STATIC_WEB_APPS_API_TOKEN=--apiToken ${{ inputs.azure_static_web_apps_api_token || 'no_token_provided' }}"
          echo "TA_CLI_SKIP_DEPLOY_ON_MISSING_SECRETS=${{ inputs.skip_deploy_on_missing_secrets == 'true' && '--skipDeployOnMissingSecrets' }}"
          echo "TA_CLI_SKIP_APP_BUILD=${{ inputs.skip_app_build == 'true' && '--skipAppBuild' }}"
        }
        set -eax -o pipefail
        write_env | tee -a "${GITHUB_OUTPUT}"

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ steps.globals.outputs.TA_USERNAME }}
        password: ${{ steps.globals.outputs.TA_PASSWORD }}
        logout: false

    - name: Extract Image Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.globals.outputs.TA_GHCR_IMAGE }}

    - name: Build Image
      id: docker-push
      uses: docker/build-push-action@v6
      with:
        context: ${{ github.action_path }}
        file: ${{ github.action_path }}/Dockerfile
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Get Image Name
      id: get-image-name
      shell: bash
      run: |
          imageName=${{ fromJSON(steps.docker-push.outputs.metadata)['image.name'] }}
          echo "image_name="${imageName}"" >> $GITHUB_OUTPUT

    - name: Run
      shell: bash
      env:
        WORKSPACE_LOCAL_PATH: "${{ steps.globals.outputs.TA_WORKSPACE_PATH }}"
        WORKSPACE_DOCKER_PATH: "${{ steps.globals.outputs.TA_WORKSPACE_PATH }}"
        CLI_ARGS: >-
          ${{ steps.globals.outputs.TA_CLI_INPUT_ACTION }}
          ${{ steps.globals.outputs.TA_CLI_APP_LOCATION }}
          ${{ steps.globals.outputs.TA_CLI_DATA_APP_ARTIFACT_LOCATION }}
          ${{ steps.globals.outputs.TA_CLI_DATA_API_LOCATION }}
          ${{ steps.globals.outputs.TA_CLI_AZURE_STATIC_WEB_APPS_API_TOKEN }}
          ${{ steps.globals.outputs.TA_CLI_SKIP_DEPLOY_ON_MISSING_SECRETS }}
          ${{ steps.globals.outputs.TA_CLI_SKIP_APP_BUILD }}
      run: >-
        docker run
        --rm
        -v "$WORKSPACE_LOCAL_PATH":"$WORKSPACE_DOCKER_PATH"
        --workdir "$WORKSPACE_DOCKER_PATH"
        "${{ steps.get-image-name.outputs.image_name }}"
        $CLI_ARGS
